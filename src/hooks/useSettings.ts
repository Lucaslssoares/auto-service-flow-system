
/**
 * Hook para Configura√ß√µes do Sistema
 * 
 * Gerencia todas as configura√ß√µes globais do SaaS de lava-car.
 * Inclui configura√ß√µes de neg√≥cio, operacionais, financeiras e t√©cnicas.
 * 
 * Configura√ß√µes principais:
 * - Dados da empresa e contato
 * - Hor√°rios de funcionamento
 * - Regras de agendamento
 * - Configura√ß√µes financeiras
 * - Prefer√™ncias de notifica√ß√£o
 * - Configura√ß√µes de execu√ß√£o de servi√ßos
 * 
 * @author Sistema Lava Car
 * @version 1.0.0
 */

import { useState } from "react";
import { toast } from "sonner";
import { SettingsData } from "@/types/settings";

export const useSettings = () => {
  // Configura√ß√µes padr√£o otimizadas para SaaS
  const [settings, setSettings] = useState<SettingsData>({
    // === CONFIGURA√á√ïES DA EMPRESA ===
    businessName: "Lava Car Premium",
    businessPhone: "(11) 99999-9999",
    businessEmail: "contato@lavacar.com.br",
    businessAddress: "Rua das Flores, 123 - S√£o Paulo/SP",
    
    // === HOR√ÅRIOS DE FUNCIONAMENTO ===
    workingHours: {
      start: "07:00",
      end: "18:00",
      daysOfWeek: ["monday", "tuesday", "wednesday", "thursday", "friday", "saturday"]
    },
    
    // === CONFIGURA√á√ïES DE AGENDAMENTO ===
    appointmentSettings: {
      allowSameDayBooking: true,        // Permite agendamento no mesmo dia
      maxAdvanceDays: 30,               // M√°ximo de dias para agendamento futuro
      slotDuration: 30,                 // Dura√ß√£o do slot em minutos
      bufferTime: 15,                   // Tempo de folga entre agendamentos
      autoConfirm: false                // Confirma√ß√£o autom√°tica de agendamentos
    },
    
    // === CONFIGURA√á√ïES FINANCEIRAS ===
    financialSettings: {
      currency: "BRL",                  // Moeda padr√£o
      taxRate: 0,                       // Taxa de impostos (%)
      defaultCommissionRate: 10,        // Comiss√£o padr√£o dos funcion√°rios (%)
      allowDiscounts: true,             // Permite descontos
      requirePaymentConfirmation: true  // Exige confirma√ß√£o de pagamento
    },
    
    // === NOTIFICA√á√ïES ===
    notifications: {
      emailNotifications: true,         // Notifica√ß√µes por email
      smsNotifications: false,          // Notifica√ß√µes por SMS
      appointmentReminders: true,       // Lembretes de agendamento
      paymentReminders: true            // Lembretes de pagamento
    },

    // === CONFIGURA√á√ïES DE EXECU√á√ÉO ===
    executionSettings: {
      allowMultipleEmployees: true,     // Permite m√∫ltiplos funcion√°rios por servi√ßo
      requireProfitDistribution: true,  // Exige distribui√ß√£o de lucros
      autoCalculateCommissions: false,  // C√°lculo autom√°tico de comiss√µes
      minProfitPercentage: 5,          // Porcentagem m√≠nima de lucro
      maxEmployeesPerService: 5        // M√°ximo de funcion√°rios por servi√ßo
    }
  });

  const [loading, setLoading] = useState(false);

  /**
   * Atualiza uma configura√ß√£o espec√≠fica
   * Suporta paths aninhados usando nota√ß√£o de pontos
   * Ex: updateSetting('workingHours.start', '08:00')
   */
  const updateSetting = (path: string, value: any) => {
    console.log(`‚öôÔ∏è Atualizando configura√ß√£o: ${path} = ${value}`);
    
    const keys = path.split('.');
    setSettings(prev => {
      const newSettings = { ...prev };
      let current: any = newSettings;
      
      // Navega at√© o objeto pai
      for (let i = 0; i < keys.length - 1; i++) {
        if (current[keys[i]] === undefined) {
          current[keys[i]] = {};
        }
        current = current[keys[i]];
      }
      
      // Atualiza o valor final
      current[keys[keys.length - 1]] = value;
      return newSettings;
    });
  };

  /**
   * Salva todas as configura√ß√µes
   * Em produ√ß√£o, deve persistir no banco de dados
   * Inclui valida√ß√£o de dados cr√≠ticos
   */
  const handleSave = async () => {
    setLoading(true);
    console.log('üíæ Salvando configura√ß√µes do sistema...');
    
    try {
      // Valida√ß√µes cr√≠ticas
      if (!settings.businessName?.trim()) {
        throw new Error('Nome da empresa √© obrigat√≥rio');
      }
      
      if (!settings.businessEmail?.includes('@')) {
        throw new Error('Email da empresa inv√°lido');
      }
      
      if (settings.financialSettings.defaultCommissionRate < 0 || 
          settings.financialSettings.defaultCommissionRate > 100) {
        throw new Error('Taxa de comiss√£o deve estar entre 0% e 100%');
      }

      // Simula salvamento (em produ√ß√£o: integrar com Supabase)
      await new Promise(resolve => setTimeout(resolve, 1500));
      
      console.log('‚úÖ Configura√ß√µes salvas:', settings);
      toast.success("‚úÖ Configura√ß√µes salvas com sucesso!");
      
    } catch (error: any) {
      console.error('‚ùå Erro ao salvar configura√ß√µes:', error);
      toast.error(`‚ùå Erro: ${error.message}`);
    } finally {
      setLoading(false);
    }
  };

  /**
   * Reseta configura√ß√µes para padr√£o
   * √ötil para troubleshooting
   */
  const resetToDefault = () => {
    console.log('üîÑ Resetando configura√ß√µes para padr√£o');
    // Implementar reset se necess√°rio
    toast.info("üîÑ Configura√ß√µes resetadas para padr√£o");
  };

  /**
   * Valida configura√ß√µes atuais
   * Retorna lista de problemas encontrados
   */
  const validateSettings = (): string[] => {
    const issues: string[] = [];
    
    if (!settings.businessName?.trim()) {
      issues.push('Nome da empresa n√£o informado');
    }
    
    if (!settings.businessEmail?.includes('@')) {
      issues.push('Email da empresa inv√°lido');
    }
    
    if (settings.workingHours.start >= settings.workingHours.end) {
      issues.push('Hor√°rio de funcionamento inv√°lido');
    }
    
    return issues;
  };

  // API p√∫blica do hook
  return {
    // Estado das configura√ß√µes
    settings,
    loading,
    
    // Opera√ß√µes
    updateSetting,
    handleSave,
    resetToDefault,
    validateSettings,
    
    // Utilit√°rios
    isValid: validateSettings().length === 0
  };
};
